@model NOTEA.Models.ConspectListModel<ConspectModel>

@{
    ViewData["Title"] = "Conspect list";
}

<h1>The list of conspects</h1>

<br />

<div>
    @using (Html.BeginForm("ConspectList", "Conspect", FormMethod.Get))
    {
        <table>
            <tr>
                <td>
                    <span><b>Search by:</b></span>
                    <input type="checkbox" id="check" name="searchBy" value="name" onchange="showHideInput('check', 'text_box', 'button54')">
                    <label>Conspect name</label>
                    <input type="checkbox" id="check1" name="searchBy" value="ConspectSemester" onchange="showHideInput('check1', 'semester', 'button54')">
                    <label>Semester</label>
                </td>
            </tr>
            <tr>
                <td>
                    @Html.TextBox("searchValue", null, new {Class = "form-control", placeholder = " Enter conspect name", id="text_box", style="display: none;", required = true})
                </td>
                <td>
                    @* @Html.DropDownListFor(Model => Model.Conspects[0].ConspectSemester, EnumHelper<ConspectSemester>.GetSelectList(), new { @class = "selectpicker show-menu-arrow", id="semester", style="height:40px;display: none;", data_live_search = "true" }) *@
                    @Html.DropDownListFor(o => o.ConspectSemesters, Enum.GetValues(typeof(ConspectSemester)).Cast<ConspectSemester>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }))
                    @* @Html.DropDownList("searchValueSemester",
                Enum.GetValues(typeof(ConspectSemester)).Cast<ConspectSemester>()
                .Select(x => new SelectListItem {Text = x.ToDescription(), Value = x.ToString()})) //tsg kitaip parodo values drop down liste*@
                    </td>
                <td>
                    &nbsp;
                </td>
                <td>
                    <input type="submit" value="Search" class="btn btn-success" />
                </td>
            </tr>
        </table>
    }
</div>
<br />

<input type="submit" onclick="location.href='@Url.Action("SortConspect","Conspect")'" value="Sort by date" />
<br />
<p></p>
<table class="table">
    <tbody>
        @foreach  (ConspectModel conspectModel in Model.Conspects)
        {
            <tr>
                <td>
                    <input type="submit" onclick="location.href='@Url.Action("ViewConspect","Conspect", new {Index = Model.Conspects.IndexOf(conspectModel) })'" value="@conspectModel.Name" />
                </td>
                <td>
                    @conspectModel.Date.ToLongDateString()
                </td>
            </tr>
        }
    </tbody>
</table>


<!-- Error Message Modal -->
<div class="modal fade" id="myModalError" tabindex="-1" role="dialog" aria-labelledby="myModalErrorLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background-color: #ff6b6b; color: black;">
                <h5 class="modal-title" id="myModalErrorLabel">Oops...</h5>
            </div>
            <div class="modal-body">
                <div id="MyModalErrorAlertBody">
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script type="text/javascript">
        function openErrorModal(errorMessage) {
            var errorDiv = document.getElementById("MyModalErrorAlertBody");
            errorDiv.innerHTML = errorMessage;
            $('#myModalError').modal('show');
        }

        $(document).ready(function () {
            var errorMsg = "@TempData["ErrorMessage"]";
            if (errorMsg)
                openErrorModal(errorMsg);
        });
    </script>
}

<script>
    function showHideInput(checkboxId, panInputId, buttonId) {
        let checkbox = document.getElementById(checkboxId);
        let pan_input = document.getElementById(panInputId);
        let button = document.getElementById(buttonId)

        if (checkbox.checked) {
            pan_input.style.display = "flex";
            button.style.display = "flex";
        } else {
            pan_input.style.display = "none";
        }
    }
</script>