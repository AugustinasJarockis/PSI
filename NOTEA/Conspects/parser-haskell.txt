{"Date":"2023-10-18T17:36:57.6963873+03:00","ConspectSemester":0,"Name":"parser-haskell","ConspectText":"data ParsedStatement = ParsedStatement\r\n  | SelectFromTable TableName\r\n  | ShowTables [TableName]\r\n\r\nnewtype Parser a = Parser {\r\n    runParser :: String -> Either ErrorMessage (a, String)\r\n}\r\n\r\ninstance Functor Parser where\r\n  fmap f (Parser x) = Parser $ \\s -> do\r\n    (x', s') <- x s\r\n    return (f x', s')\r\n  \r\ninstance Applicative Parser where\r\n  pure x = Parser $ \\s -> Right (x, s)\r\n  (Parser f) <*> (Parser x) = Parser $ \\s -> do\r\n    (f', s1) <- f s\r\n    (x', s2) <- x s1\r\n    return (f' x', s2)\r\n\r\ninstance Monad Parser where\r\n  (Parser x) >>= f = Parser $ \\s -> do\r\n    (x', s') <- x s\r\n    runParser (f x') s'\r\n\r\ninstance MonadFail Parser where\r\n  fail _ = Parser $ \\_ -> Left \"Monad failed\"","ConspectRecords":[]}